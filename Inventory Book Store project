import java.util.*;

class Book {
    private String name;
    private String author;
    private int buyingPrice;
    private int sellingPrice;
    private int quantity;

    public Book(String name, String author, int buyingPrice, int sellingPrice, int quantity) {
        this.name = name;
        this.author = author;
        this.buyingPrice = buyingPrice;
        this.sellingPrice = sellingPrice;
        this.quantity = quantity;
    }

    public String getName() {
        return name;
    }

    public String getAuthor() {
        return author;
    }

    public int getBuyingPrice() {
        return buyingPrice;
    }

    public int getSellingPrice() {
        return sellingPrice;
    }

    public int getQuantity() {
        return quantity;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }
}

class Warehouse {
    private List<Book> books = new ArrayList<>();
    private int totalProfit = 0;
    private int totalLoss = 0;
    private Scanner sc = new Scanner(System.in);

    // Add a new book to the inventory
    public void addBook() {
        try {
            System.out.print("Enter Book Name: ");
            String name = getValidName();

            System.out.print("Enter Book Author Name: ");
            String author = getValidName();

            System.out.print("Enter Buying Price: ");
            int buyingPrice = getValidInteger();

            System.out.print("Enter Selling Price: ");
            int sellingPrice = getValidInteger();

            System.out.print("Enter Quantity: ");
            int quantity = getValidInteger();

            books.add(new Book(name, author, buyingPrice, sellingPrice, quantity));
            System.out.println("Book added successfully!\n");
        } catch (Exception e) {
            System.out.println("An unexpected error occurred. Please try again.");
            sc.nextLine(); // Clear input buffer
        }
    }

    // Display all books in the inventory
    public void displayBooks() {
        if (books.isEmpty()) {
            System.out.println("No books available in the store.");
            return;
        }
        System.out.println("Books Available in Store:");
        System.out.println("ID\tName\tAuthor\tBuying Price\tSelling Price\tQuantity");
        for (int i = 0; i < books.size(); i++) {
            Book book = books.get(i);
            System.out.println((i + 1) + "\t" + book.getName() + "\t" + book.getAuthor() + "\t"
                    + book.getBuyingPrice() + "\t\t" + book.getSellingPrice() + "\t\t" + book.getQuantity());
        }
    }

    // Handle book purchase by customer
    public void purchaseBook() {
        try {
            displayBooks();
            if (books.isEmpty()) return;

            System.out.print("Enter Book ID to Purchase: ");
            int id = getValidInteger() - 1;

            if (id < 0 || id >= books.size()) {
                System.out.println("Invalid Book ID!");
                return;
            }

            Book book = books.get(id);

            System.out.print("Enter Quantity to Purchase: ");
            int qty = getValidInteger();

            if (qty > book.getQuantity()) {
                System.out.println("Insufficient stock!");
                return;
            }

            System.out.print("Enter Your Name: ");
            String name = getValidName();

            System.out.print("Enter Your Phone Number: ");
            String phone = getValidPhone();

            System.out.print("Enter Your Address: ");
            String address = getValidAddress();

            // Update stock and calculate profit/loss
            book.setQuantity(book.getQuantity() - qty);
            int profitLoss = (book.getSellingPrice() - book.getBuyingPrice()) * qty;

            if (profitLoss > 0) {
                totalProfit += profitLoss;
            } else {
                totalLoss += Math.abs(profitLoss);
            }

            // Display invoice
            System.out.println("\nPurchase Successful! Invoice:");
            System.out.println("Customer Name: " + name + "\nPhone: " + phone + "\nAddress: " + address);
            System.out.println("Book Name: " + book.getName() + ", Quantity: " + qty
                    + ", Total Price: " + (book.getSellingPrice() * qty));
            System.out.println("-------------------------------------------------------------------------------\n");
        } catch (Exception e) {
            System.out.println("An unexpected error occurred. Please try again.");
            sc.nextLine(); // Clear input buffer
        }
    }

    // Display total profit and loss
    public void checkProfitLoss() {
        System.out.println("Total Profit: " + totalProfit);
        System.out.println("Total Loss: " + totalLoss);
    }

    // Validate user input for names
    private String getValidName() {
        while (true) {
            String name = sc.nextLine().trim();
            if (name.matches("[a-zA-Z ]+")) {
                return name;
            }
            System.out.println("Invalid input! Please enter alphabetic characters only.");
            System.out.print("Re-enter: ");
        }
    }

    // Validate user input for phone numbers
    private String getValidPhone() {
        while (true) {
            String phone = sc.nextLine().trim();
            if (phone.matches("\\d{10}")) {
                return phone;
            }
            System.out.println("Invalid phone number! Please enter exactly 10 digits.");
            System.out.print("Re-enter: ");
        }
    }

    // Validate user input for addresses
    private String getValidAddress() {
        while (true) {
            String address = sc.nextLine().trim();
            if (!address.isEmpty()) {
                return address;
            }
            System.out.println("Invalid address! Address cannot be empty.");
            System.out.print("Re-enter: ");
        }
    }

    // Validate user input for integers
    public int getValidInteger() {
        while (true) {
            try {
                return Integer.parseInt(sc.nextLine().trim());
            } catch (NumberFormatException e) {
                System.out.println("Invalid input! Please enter a valid integer.");
                System.out.print("Re-enter: ");
            }
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Warehouse warehouse = new Warehouse();

        System.out.println("Welcome to the Bookstore!");

        int choice;
        do {
            // Display menu
            System.out.println("\n1. Add Book");
            System.out.println("2. Display Books");
            System.out.println("3. Purchase Book");
            System.out.println("4. Check Profit/Loss");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");
            choice = warehouse.getValidInteger();

            // Handle user choices
            switch (choice) {
                case 1:
                    warehouse.addBook();
                    break;
                case 2:
                    warehouse.displayBooks();
                    break;
                case 3:
                    warehouse.purchaseBook();
                    break;
                case 4:
                    warehouse.checkProfitLoss();
                    break;
                case 5:
                    System.out.println("Thank you for using the Bookstore Management System!");
                    break;
                default:
                    System.out.println("Invalid choice! Please try again.");
            }
        } while (choice != 5);
    }
}
